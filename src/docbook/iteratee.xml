<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
    <!ENTITY mdash "&#8212;">
    <!ENTITY ellipsis "&#8230;">
    <!ENTITY reg "&#174;">
    <!ENTITY square "&#9744;">
    <!ENTITY squarewithcross "&#9746;">
    <!ENTITY acuteu "&#250;">
    ]>

<sect1 id="Iteratee">
  <title>Iteratee</title>
  <sect2>
    <title>The Problem</title>
    <itemizedlist>
      <listitem>
        <para>
          Here is a function signature to return the first result of a database result-set:
          <code>def first(sql: String): Option[Row]</code>
        </para>
      </listitem>
      <listitem>
        <para>
          Here is a function signature to drop the first <code>n</code> results of a database result-set:
          <code>def drop(sql: String, n: Int): ResultSet</code>
        </para>
      </listitem>
      <listitem>
        <para>
          Here is a function signature that combines result-sets so we can combine the operations on them:
          <code>def combine(r1: ResultSet, r2: ResultSet): ResultSet</code>
        </para>
      </listitem>
      <listitem>
        <para>
          JUST KIDDING &mdash; iterators do not compose!
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>The Quasi-Solutions</title>
    <itemizedlist>
      <listitem>
        <para>
          Read the <code>ResultSet</code> into memory:
          <code>def combine(r1: List[Row], r2: List[Row]): List[Row]</code>
        </para>
      </listitem>
      <listitem>
        <para>
          Hand-fuse all database operations &mdash; explosion of code repetition and bugs-infinite
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>Turning Iterators on Their Head</title>
    <programlisting>
sealed trait Input[E]
case class Empty[E]() extends Input[E]
case class Eof[E]() extends Input[E]
case class El[E](e: E) extends Input[E]

// that which is being iterated
sealed trait Iteratee[E, A]
case class Done[E, A](a: A, r: Input[E])
      extends Iteratee[E, A]
case class Cont[E, A](k: Input[E] => Iteratee[E, A])
      extends Iteratee[E, A]</programlisting>
  </sect2>
  <sect2>
    <title>Iteratees Compose and Can Operate on Big Data</title>
    <itemizedlist>
      <listitem>
        <para>
          <code>def map[A, B](f: A => B): Iteratee[E, A] => Iteratee[E, B]</code>
        </para>
      </listitem>
      <listitem>
        <para>
          <code>def flatMap[A, B](f: A => Iteratee[E, B]): Iteratee[E, A] => Iteratee[E, B]</code>
        </para>
      </listitem>
      <listitem>
        <para>
          Iteratees can run on data as large as the result of their composition.
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>Peek and Drop</title>
    <para>
      And now we can write <code>first</code> and <code>drop</code> operations:
      <programlisting>
def first[E]: Iteratee[E, Option[E]] = {
  def step(s: Input[E]): Iteratee[E, Option[E]] =
    s match {
      case Empty() => Cont(step)
      case Eof()   => Done(None, Eof())
      case El(k)   => Done(Some(k), Eof())
    }
  Cont(step)
}

def drop[E](n: Int): Iteratee[E, Unit] = {
  def step(s: Input[E]): Iteratee[E, Unit] =
    s match {
      case Empty() => Cont(step)
      case Eof()   => Done((), Eof())
      case El(_)   => drop(n - 1)
    }
  if (n == 0) Done((), Empty())
  else Cont(step)
}</programlisting>
    </para>
  </sect2>
  <sect2>
    <title>And Then We Combine Them Indefinitely&ellipsis;</title>
    <programlisting>
val r: Iteratee[E, Q] =
  for {
    x &lt;- first   // x: Option[A]
    _ &lt;- drop(n)
    y &lt;- first   // y: Option[B]
  } yield f(x, y) // f returns R</programlisting>
  </sect2>
  <sect2>
    <title>But There's a Catch</title>
    <itemizedlist>
      <listitem>
        <para>
          Iteratee traversal will consume stack-space <emphasis>proportional to the size of the data</emphasis>!
        </para>
      </listitem>
      <listitem>
        <para>
          We can use the Free monad to implement trampolining<footnote>
            <para>
              Stackless Scala With Free Monads &mdash; R&acuteu;nar Bjarnason
            </para>
          </footnote>
        </para>
      </listitem>
      <listitem>
        <para>
          This allows us to mechanically transform our program to consume heap and use garbage-collection instead
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>Questions?</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="resources/images/ask-questions.jpg" format="JPG"/>
        </imageobject>
      </mediaobject>
  </sect2>
</sect1>
