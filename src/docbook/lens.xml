<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
    <!ENTITY mdash "&#8212;">
    <!ENTITY ellipsis "&#8230;">
    <!ENTITY reg "&#174;">
    <!ENTITY square "&#9744;">
    <!ENTITY squarewithcross "&#9746;">
    ]>

<sect1 id="Lenses">
  <title>Lenses</title>
  <sect2>
    <title>Use-case</title>
    <blockquote>
      <para>
        Given a JSON value, if it is an object, get the value associated with the "wibble" key and if that is an array, get the first value that is an object and get its first key starting with 'F' and if that is a boolean, negate it.
      </para>
    </blockquote>
  </sect2>
  <sect2>
    <title>Er no</title>
    <programlisting>
json match {
  case JObject(x) =>
    x find { case (k, v) => k == "wibble" } match {
      case JArray(y) =>
        y collect { case JObject(z) => z } match {
          case Some(q) =>
            q find { case (k, v) => k startsWith 'F' } match {
              case JBool(r) => &ellipsis; <emphasis role="bold">negate r, HELP I AM TRAPPED!</emphasis>
              case _ => json
            }
          case None => json
        }
      case _ => json
    }
  case _ => json
}</programlisting>
  </sect2>
  <sect2>
    <title>Partial Lens</title>
    <itemizedlist>
      <listitem>
        <para>
          <code>case class @?>[A, B](f: A => Option[(B => A, B)])</code>
        </para>
      </listitem>
      <listitem>
        <para>
          We write a partial lens for each non-nullary ADT constructor
        </para>
      </listitem>
      <listitem>
        <para>
          e.g. instead of the constructor <code>JArray: List[JSON] => JSON</code>
        </para>
      </listitem>
      <listitem>
        <para>
          we complement with <code>jArrayL: JSON @?> List[JSON]</code>
          <programlisting>
val jArrayL = @?> {
  case JArray(x) => Some((JArray(_), x))
  case _ => None
}</programlisting>
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>Partial Lenses Compose under a Category</title>
      <itemizedlist>
      <listitem>
        <para>
          Given a partial lens over A and B, a partial lens over B and C, we get a partial lens over A and C.
        </para>
      </listitem>
      <listitem>
        <para>
          <code>def compose[A, B, C](f: A @?> B)(g: B @?> C): A @?> C</code>
        </para>
      </listitem>
      <listitem>
        <para>
          Implemented as a method on <code>PartialLens</code>, called <code>>=></code>.
        </para>
      </listitem>
    </itemizedlist>
  </sect2>
  <sect2>
    <title>Use-case Again</title>
    <blockquote>
      <para>
        Given a JSON value, if it is an object, get the value associated with the "wibble" key and if that is an array, get the first value that is an object and get its first key starting with 'F' and if that is a boolean, negate it.
      </para>
    </blockquote>
    <programlisting>
val usecase =
  jObjectL >=>
  lookupL("wibble") >=>
  jArrayL >=>
  lookupL(_ startsWith 'F')(jObjectL) >=>
  jBooleanL
val op = usecase modify (!_)
val result = op(json)
</programlisting>
  </sect2>
</sect1>
